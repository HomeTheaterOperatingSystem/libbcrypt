BCRYPT(3)
=========

NAME
----
bcrypt - Password hashing library

SYNOPSIS
--------

Header and prototypes
~~~~~~~~~~~~~~~~~~~~~

---------------------------------------
#include <bcrypt.h>

int bcrypt_gensalt(int workfactor, char salt[BCRYPT_HASHSIZE]);

int bcrypt_hashpw(const char *passwd,
                  const char salt[BCRYPT_HASHSIZE],
                  char hash[BCRYPT_HASHSIZE]);

int bcrypt_checkpw(const char passwd, const char hash[BCRYPT_HASHSIZE]);
---------------------------------------

Compilation and linkage
~~~~~~~~~~~~~~~~~~~~~~~

In systems with *pkg-config* or an equivalent tool, compile with *pkg-config
--cflags bcrypt* and link with *pkg-config --libs bcrypt*.

Otherwise, check the installation path for *bcrypt.h* and link with *-lbcrypt*
and an additional *-L* flag to indicate the library location.

DESCRIPTION
-----------

The function _bcrypt_gensalt_ can be used to generate a salt value for hashing a
password with a following call to _bcrypt_hashpw_. Its _workfactor_ argument
determines how many rounds will be used and the time it will take to hash or
verify the hashed password. Allowed values range from 4 to 31. If the provided
work factor is not in the previous range, it will default to
BCRYPT_DEFAULT_WORK_FACTOR. The _salt_ argument is an output array of chars that
will store the generated salt. It must have space for at least BCRYPT_HASHSIZE
bytes.

The function _bcrypt_hashpw_ expects a password to be hashed (_passwd_), a
_salt_ to hash the password with, generated with _bcrypt_gensalt_ and a char
array to leave the result (_hash_). Both the salt and the output hash arguments
must point to buffers with, at least, BCRYPT_HASHSIZE bytes in capacity. It can
also be used to verify passwords, but it is easier to use _bcrypt_checkpw_ for
that specific purpose.

The function _bcrypt_checkpw_ expects a password (_passwd_) and a _hash_ to
verify the password against, allowing you to see if the password matches a
stored hash.

Do note the generated hashes are null-terminated strings that can be printed or
stored and they include the salt information. There is no need to store the salt
separately. Hence, verifying a password only needs the hash string.

RETURN VALUE
------------

Both _bcrypt_gensalt_ and _bcrypt_hashpw_ return zero on success and nonzero on
errors.

_bcrypt_checkpw_ will return -1 on errors, zero if the provided password matches
the given hash and a value greater than zero if the password and hashes do not match.

EXAMPLE
-------

Hashing a password:

---------------------------------------
char salt[BCRYPT_HASHSIZE];
char hash[BCRYPT_HASHSIZE];
int ret;

ret = bcrypt_gensalt(BCRYPT_DEFAULT_WORK_FACTOR, salt);
if (ret != 0)
    // Handle the error here.
ret = bcrypt_hashpw("thepassword", salt, hash);
if (ret != 0)
    // Handle another error here.
printf("Generated hash: %s\n", hash);
---------------------------------------

Verifying a password:

---------------------------------------
char hash[BCRYPT_HASHSIZE];
int ret;

// Read the hash somewhere here and store it in the `hash' variable.

ret = bcrypt_checkpw("thepassword", hash);
if (ret == -1)
    // Handle the error here.

if (ret == 0)
    printf("The password matches\n");
else
    printf("The password does NOT match\n");
---------------------------------------

AUTHORS
-------

Ricardo Garcia <r@rg3.name> based on the work of Solar Designer at
http://www.openwall.com/crypt/.
